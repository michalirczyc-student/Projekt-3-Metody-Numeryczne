### PROJEKT 3 ####
# WYKONAŁ: MICHAŁ IRCZYC (NR ALBUMU: 280674)


## ZADANIE 1 #######################################################################################

import numpy as np
import matplotlib.pyplot as plt

log = np.log

h = 0.001


def Gompertz(x,r,k):
    t = np.arange(75,115,h)
    
    X = np.zeros(t.shape[0])
    X[75] = x


    for t in range(75+1,t.shape[0]):
        X[t] = X[t-1]+h*r*X[t-1]*log(k/X[t-1])

    return X

def Verhulst(x,r,k):
    t = np.arange(75,115,h)

    X = np.zeros(t.shape[0])
    X[75] = x

    for t in range(75+1,t.shape[0]):
        X[t] = X[t-1]+h*r*X[t-1]*(1-X[t-1]/k)

    return X


x = 10
k = 100000
r = 0.4

X = Gompertz(x,r,k)
Y = Verhulst(x,r,k)

plt.plot(X,label = 'Gompertz')
plt.plot(Y,label = 'Verhulst')
plt.legend()
plt.show()

## ZADANIE 2 #######################################################################################
# a)
args1a = (1.25,0.5,0.1)
args2a = (0.5,0.2,0.2)
inita = (3,4)
# b)
args1b = (5,4,1)
args2b = (5,8,4)
initb = (3,4)

t0 = 0
tf = 30
h = 0.001
t = np.arange(t0,tf,h)

def func(args1,args2,init):
    e1 = args1[0]
    g1 = args1[1]
    h1 = args1[2]
    e2 = args2[0]
    g2 = args2[1]
    h2 = args2[2]

    t = np.arange(t0,tf,h)

    N1 = np.zeros(t.shape[0])
    N2 = np.zeros(t.shape[0])

    N1[0] = init[0]
    N2[0] = init[1]

    for i in range(1,t.shape[0]):
        N1[i] = N1[i-1]+h*(e1-g1*((h1*N1[i-1])+(h2*N2[i-1])))*N1[i-1]
        N2[i] = N2[i-1]+h*(e2-g2*((h1*N1[i-1])+(h2*N2[i-1])))*N2[i-1]
    


    return N1,N2
    

N1a,N2a= func(args1a,args2a,inita)
N1b,N2b = func(args1b,args2b,initb)

print(N1a,N2a)

plt.title("Zadanie 2 przykłady a) i b)")
plt.subplot(2,1,1)
plt.plot(t,N1a,color = "b", label = 'N1')
plt.plot(t,N2a, color = "r", label = 'N2')
plt.ylabel("a)")
plt.xlabel("Time")
plt.legend()
plt.subplot(2,1,2)
plt.plot(t,N1b,color = "b", label = 'N1')
plt.plot(t,N2b, color = "r", label = 'N2')
plt.ylabel("b)")
plt.xlabel("Time")
plt.legend()
plt.show()


args1c = (0.8,1,0.3)
args2c = (0.4,0.5,0.4)

# c)
initc1 = (4,8)

N1c,N2c= func(args1c,args2c,initc1)

e1c = args1c[0]
g1c = args1c[1]
h1c = args1c[2] 
e2c = args2c[0] 
g2c = args2c[1] 
h2c = args2c[2]

x0 = np.linspace(12,0,23)
y0 = np.linspace(12,0,23)

X,Y = np.meshgrid(x0,y0)
dX = np.zeros(X.shape)
dY = np.zeros(Y.shape)

for i in range(X.shape[0]):
    for j in range(Y.shape[0]):
        dX[i,j] = ((e1c-g1c*(h1c*X[i,j]+h2c*Y[i,j]))*Y[i,j])
        dY[i,j] = ((e2c-g2c*(h1c*Y[i,j]+h2c*X[i,j]))*X[i,j])

initd = (8,8)
inite = (12,8)
N1d,N2d = func(args1c,args2c,initd)
N1e,N2e = func(args1c,args2c,inite)

plt.plot(N1c,N2c,color = 'r')
plt.plot(N1d,N2d,color = 'g')
plt.plot(N1e,N2e,color = 'y')
plt.title("Wykres fazowy")
plt.show()
    

plt.plot(N1c,N2c,color = 'r')
plt.plot(N1d,N2d,color = 'g')
plt.plot(N1e,N2e,color = 'y')
plt.quiver(dX,dY,X,Y,color = 'b')
plt.title("Portret fazowy")
plt.show()






   
